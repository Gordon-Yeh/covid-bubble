'use strict';

const assert = require('assert');
const sinon = require('sinon');
const Database = require('../db');
const id = require('../utils/id');
const userController = require('./user');

describe('controllers/user', function() {
  afterEach(function() {
    sinon.restore();
  })
  
  describe('#createUser()',  function() {
    it('should call db query and return user info', async function() {
      let dbQueryStub = sinon.stub(Database.prototype, 'query');
      dbQueryStub.resolves('success');
      sinon.stub(id, 'genUserId').returns('test_user_id');
      let result = await userController.createUser('test_email', 'test_password', 'test_first_name', 'test_last_name', 'test_username');
      assert(dbQueryStub.calledOnce);
      assert.deepEqual(result, {
        email: 'test_email',
        firstName: 'test_first_name',
        lastName: 'test_last_name',
        userId: 'test_user_id',
        username: 'test_username'
      });
    });

    it('should create a user with id generated by util/id.genUserId', async function () {
      let dbQueryStub = sinon.stub(Database.prototype, 'query');
      dbQueryStub.resolves('success');
      sinon.stub(id, 'genUserId').returns('test_user_id');
      await userController.createUser('test_email', 'test_password', 'test_first_name', 'test_last_name', 'test_username');

      sinon.assert.calledWith(dbQueryStub,
        'INSERT INTO Users (user_id, email, first_name, last_name, password, username) VALUES (?, ?, ?, ?, ?, ?)',
        [
          'test_user_id',
          'test_email',
          'test_first_name',
          'test_last_name',
          'test_password',
          'test_username'
        ]
      );
    });

    it('should throw error with message "Fail to insert into database" if db.query fails', async function () {
      let dbQueryStub = sinon.stub(Database.prototype, 'query');
      dbQueryStub.rejects('failure');
      try {
        await userController.createUser('test_email', 'test_password', 'test_first_name', 'test_last_name');
        assert(false, 'error should have been thrown');
      } catch (e) {
        assert(dbQueryStub.calledOnce);
        assert.equal(e.message, "database_error");
      }
    });
  });

  describe('#login()', function() {
    it('should call db query', function() {

    });
  })
});